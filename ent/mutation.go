// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kechako/envoke/ent/environment"
	"github.com/kechako/envoke/ent/predicate"
	"github.com/kechako/envoke/ent/variable"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEnvironment = "Environment"
	TypeVariable    = "Variable"
)

// EnvironmentMutation represents an operation that mutates the Environment nodes in the graph.
type EnvironmentMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	description      *string
	clearedFields    map[string]struct{}
	variables        map[int]struct{}
	removedvariables map[int]struct{}
	clearedvariables bool
	done             bool
	oldValue         func(context.Context) (*Environment, error)
	predicates       []predicate.Environment
}

var _ ent.Mutation = (*EnvironmentMutation)(nil)

// environmentOption allows management of the mutation configuration using functional options.
type environmentOption func(*EnvironmentMutation)

// newEnvironmentMutation creates new mutation for the Environment entity.
func newEnvironmentMutation(c config, op Op, opts ...environmentOption) *EnvironmentMutation {
	m := &EnvironmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEnvironment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnvironmentID sets the ID field of the mutation.
func withEnvironmentID(id int) environmentOption {
	return func(m *EnvironmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Environment
		)
		m.oldValue = func(ctx context.Context) (*Environment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Environment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnvironment sets the old Environment of the mutation.
func withEnvironment(node *Environment) environmentOption {
	return func(m *EnvironmentMutation) {
		m.oldValue = func(context.Context) (*Environment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnvironmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnvironmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnvironmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnvironmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Environment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EnvironmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EnvironmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EnvironmentMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *EnvironmentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EnvironmentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *EnvironmentMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[environment.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *EnvironmentMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[environment.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *EnvironmentMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, environment.FieldDescription)
}

// AddVariableIDs adds the "variables" edge to the Variable entity by ids.
func (m *EnvironmentMutation) AddVariableIDs(ids ...int) {
	if m.variables == nil {
		m.variables = make(map[int]struct{})
	}
	for i := range ids {
		m.variables[ids[i]] = struct{}{}
	}
}

// ClearVariables clears the "variables" edge to the Variable entity.
func (m *EnvironmentMutation) ClearVariables() {
	m.clearedvariables = true
}

// VariablesCleared reports if the "variables" edge to the Variable entity was cleared.
func (m *EnvironmentMutation) VariablesCleared() bool {
	return m.clearedvariables
}

// RemoveVariableIDs removes the "variables" edge to the Variable entity by IDs.
func (m *EnvironmentMutation) RemoveVariableIDs(ids ...int) {
	if m.removedvariables == nil {
		m.removedvariables = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.variables, ids[i])
		m.removedvariables[ids[i]] = struct{}{}
	}
}

// RemovedVariables returns the removed IDs of the "variables" edge to the Variable entity.
func (m *EnvironmentMutation) RemovedVariablesIDs() (ids []int) {
	for id := range m.removedvariables {
		ids = append(ids, id)
	}
	return
}

// VariablesIDs returns the "variables" edge IDs in the mutation.
func (m *EnvironmentMutation) VariablesIDs() (ids []int) {
	for id := range m.variables {
		ids = append(ids, id)
	}
	return
}

// ResetVariables resets all changes to the "variables" edge.
func (m *EnvironmentMutation) ResetVariables() {
	m.variables = nil
	m.clearedvariables = false
	m.removedvariables = nil
}

// Where appends a list predicates to the EnvironmentMutation builder.
func (m *EnvironmentMutation) Where(ps ...predicate.Environment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EnvironmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EnvironmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Environment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EnvironmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EnvironmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Environment).
func (m *EnvironmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnvironmentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, environment.FieldName)
	}
	if m.description != nil {
		fields = append(fields, environment.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnvironmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case environment.FieldName:
		return m.Name()
	case environment.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnvironmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case environment.FieldName:
		return m.OldName(ctx)
	case environment.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Environment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnvironmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case environment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case environment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Environment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnvironmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnvironmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnvironmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Environment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnvironmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(environment.FieldDescription) {
		fields = append(fields, environment.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnvironmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnvironmentMutation) ClearField(name string) error {
	switch name {
	case environment.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Environment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnvironmentMutation) ResetField(name string) error {
	switch name {
	case environment.FieldName:
		m.ResetName()
		return nil
	case environment.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Environment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnvironmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.variables != nil {
		edges = append(edges, environment.EdgeVariables)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnvironmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case environment.EdgeVariables:
		ids := make([]ent.Value, 0, len(m.variables))
		for id := range m.variables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnvironmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvariables != nil {
		edges = append(edges, environment.EdgeVariables)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnvironmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case environment.EdgeVariables:
		ids := make([]ent.Value, 0, len(m.removedvariables))
		for id := range m.removedvariables {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnvironmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvariables {
		edges = append(edges, environment.EdgeVariables)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnvironmentMutation) EdgeCleared(name string) bool {
	switch name {
	case environment.EdgeVariables:
		return m.clearedvariables
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnvironmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Environment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnvironmentMutation) ResetEdge(name string) error {
	switch name {
	case environment.EdgeVariables:
		m.ResetVariables()
		return nil
	}
	return fmt.Errorf("unknown Environment edge %s", name)
}

// VariableMutation represents an operation that mutates the Variable nodes in the graph.
type VariableMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	value              *string
	comment            *string
	expand             *bool
	clearedFields      map[string]struct{}
	environment        *int
	clearedenvironment bool
	done               bool
	oldValue           func(context.Context) (*Variable, error)
	predicates         []predicate.Variable
}

var _ ent.Mutation = (*VariableMutation)(nil)

// variableOption allows management of the mutation configuration using functional options.
type variableOption func(*VariableMutation)

// newVariableMutation creates new mutation for the Variable entity.
func newVariableMutation(c config, op Op, opts ...variableOption) *VariableMutation {
	m := &VariableMutation{
		config:        c,
		op:            op,
		typ:           TypeVariable,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVariableID sets the ID field of the mutation.
func withVariableID(id int) variableOption {
	return func(m *VariableMutation) {
		var (
			err   error
			once  sync.Once
			value *Variable
		)
		m.oldValue = func(ctx context.Context) (*Variable, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Variable.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVariable sets the old Variable of the mutation.
func withVariable(node *Variable) variableOption {
	return func(m *VariableMutation) {
		m.oldValue = func(context.Context) (*Variable, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VariableMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VariableMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VariableMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VariableMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Variable.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEnvironmentID sets the "environment_id" field.
func (m *VariableMutation) SetEnvironmentID(i int) {
	m.environment = &i
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *VariableMutation) EnvironmentID() (r int, exists bool) {
	v := m.environment
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Variable entity.
// If the Variable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariableMutation) OldEnvironmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *VariableMutation) ResetEnvironmentID() {
	m.environment = nil
}

// SetName sets the "name" field.
func (m *VariableMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VariableMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Variable entity.
// If the Variable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariableMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VariableMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *VariableMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *VariableMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Variable entity.
// If the Variable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariableMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *VariableMutation) ResetValue() {
	m.value = nil
}

// SetComment sets the "comment" field.
func (m *VariableMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *VariableMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Variable entity.
// If the Variable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariableMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *VariableMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[variable.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *VariableMutation) CommentCleared() bool {
	_, ok := m.clearedFields[variable.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *VariableMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, variable.FieldComment)
}

// SetExpand sets the "expand" field.
func (m *VariableMutation) SetExpand(b bool) {
	m.expand = &b
}

// Expand returns the value of the "expand" field in the mutation.
func (m *VariableMutation) Expand() (r bool, exists bool) {
	v := m.expand
	if v == nil {
		return
	}
	return *v, true
}

// OldExpand returns the old "expand" field's value of the Variable entity.
// If the Variable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VariableMutation) OldExpand(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpand: %w", err)
	}
	return oldValue.Expand, nil
}

// ClearExpand clears the value of the "expand" field.
func (m *VariableMutation) ClearExpand() {
	m.expand = nil
	m.clearedFields[variable.FieldExpand] = struct{}{}
}

// ExpandCleared returns if the "expand" field was cleared in this mutation.
func (m *VariableMutation) ExpandCleared() bool {
	_, ok := m.clearedFields[variable.FieldExpand]
	return ok
}

// ResetExpand resets all changes to the "expand" field.
func (m *VariableMutation) ResetExpand() {
	m.expand = nil
	delete(m.clearedFields, variable.FieldExpand)
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (m *VariableMutation) ClearEnvironment() {
	m.clearedenvironment = true
	m.clearedFields[variable.FieldEnvironmentID] = struct{}{}
}

// EnvironmentCleared reports if the "environment" edge to the Environment entity was cleared.
func (m *VariableMutation) EnvironmentCleared() bool {
	return m.clearedenvironment
}

// EnvironmentIDs returns the "environment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnvironmentID instead. It exists only for internal usage by the builders.
func (m *VariableMutation) EnvironmentIDs() (ids []int) {
	if id := m.environment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnvironment resets all changes to the "environment" edge.
func (m *VariableMutation) ResetEnvironment() {
	m.environment = nil
	m.clearedenvironment = false
}

// Where appends a list predicates to the VariableMutation builder.
func (m *VariableMutation) Where(ps ...predicate.Variable) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VariableMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VariableMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Variable, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VariableMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VariableMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Variable).
func (m *VariableMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VariableMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.environment != nil {
		fields = append(fields, variable.FieldEnvironmentID)
	}
	if m.name != nil {
		fields = append(fields, variable.FieldName)
	}
	if m.value != nil {
		fields = append(fields, variable.FieldValue)
	}
	if m.comment != nil {
		fields = append(fields, variable.FieldComment)
	}
	if m.expand != nil {
		fields = append(fields, variable.FieldExpand)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VariableMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case variable.FieldEnvironmentID:
		return m.EnvironmentID()
	case variable.FieldName:
		return m.Name()
	case variable.FieldValue:
		return m.Value()
	case variable.FieldComment:
		return m.Comment()
	case variable.FieldExpand:
		return m.Expand()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VariableMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case variable.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case variable.FieldName:
		return m.OldName(ctx)
	case variable.FieldValue:
		return m.OldValue(ctx)
	case variable.FieldComment:
		return m.OldComment(ctx)
	case variable.FieldExpand:
		return m.OldExpand(ctx)
	}
	return nil, fmt.Errorf("unknown Variable field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VariableMutation) SetField(name string, value ent.Value) error {
	switch name {
	case variable.FieldEnvironmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case variable.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case variable.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case variable.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case variable.FieldExpand:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpand(v)
		return nil
	}
	return fmt.Errorf("unknown Variable field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VariableMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VariableMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VariableMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Variable numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VariableMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(variable.FieldComment) {
		fields = append(fields, variable.FieldComment)
	}
	if m.FieldCleared(variable.FieldExpand) {
		fields = append(fields, variable.FieldExpand)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VariableMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VariableMutation) ClearField(name string) error {
	switch name {
	case variable.FieldComment:
		m.ClearComment()
		return nil
	case variable.FieldExpand:
		m.ClearExpand()
		return nil
	}
	return fmt.Errorf("unknown Variable nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VariableMutation) ResetField(name string) error {
	switch name {
	case variable.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case variable.FieldName:
		m.ResetName()
		return nil
	case variable.FieldValue:
		m.ResetValue()
		return nil
	case variable.FieldComment:
		m.ResetComment()
		return nil
	case variable.FieldExpand:
		m.ResetExpand()
		return nil
	}
	return fmt.Errorf("unknown Variable field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VariableMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.environment != nil {
		edges = append(edges, variable.EdgeEnvironment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VariableMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case variable.EdgeEnvironment:
		if id := m.environment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VariableMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VariableMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VariableMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedenvironment {
		edges = append(edges, variable.EdgeEnvironment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VariableMutation) EdgeCleared(name string) bool {
	switch name {
	case variable.EdgeEnvironment:
		return m.clearedenvironment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VariableMutation) ClearEdge(name string) error {
	switch name {
	case variable.EdgeEnvironment:
		m.ClearEnvironment()
		return nil
	}
	return fmt.Errorf("unknown Variable unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VariableMutation) ResetEdge(name string) error {
	switch name {
	case variable.EdgeEnvironment:
		m.ResetEnvironment()
		return nil
	}
	return fmt.Errorf("unknown Variable edge %s", name)
}
