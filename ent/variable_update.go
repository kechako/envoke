// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kechako/envoke/ent/environment"
	"github.com/kechako/envoke/ent/predicate"
	"github.com/kechako/envoke/ent/variable"
)

// VariableUpdate is the builder for updating Variable entities.
type VariableUpdate struct {
	config
	hooks    []Hook
	mutation *VariableMutation
}

// Where appends a list predicates to the VariableUpdate builder.
func (vu *VariableUpdate) Where(ps ...predicate.Variable) *VariableUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetEnvironmentID sets the "environment_id" field.
func (vu *VariableUpdate) SetEnvironmentID(i int) *VariableUpdate {
	vu.mutation.SetEnvironmentID(i)
	return vu
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (vu *VariableUpdate) SetNillableEnvironmentID(i *int) *VariableUpdate {
	if i != nil {
		vu.SetEnvironmentID(*i)
	}
	return vu
}

// SetName sets the "name" field.
func (vu *VariableUpdate) SetName(s string) *VariableUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VariableUpdate) SetNillableName(s *string) *VariableUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetValue sets the "value" field.
func (vu *VariableUpdate) SetValue(s string) *VariableUpdate {
	vu.mutation.SetValue(s)
	return vu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (vu *VariableUpdate) SetNillableValue(s *string) *VariableUpdate {
	if s != nil {
		vu.SetValue(*s)
	}
	return vu
}

// SetComment sets the "comment" field.
func (vu *VariableUpdate) SetComment(s string) *VariableUpdate {
	vu.mutation.SetComment(s)
	return vu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (vu *VariableUpdate) SetNillableComment(s *string) *VariableUpdate {
	if s != nil {
		vu.SetComment(*s)
	}
	return vu
}

// ClearComment clears the value of the "comment" field.
func (vu *VariableUpdate) ClearComment() *VariableUpdate {
	vu.mutation.ClearComment()
	return vu
}

// SetExpand sets the "expand" field.
func (vu *VariableUpdate) SetExpand(b bool) *VariableUpdate {
	vu.mutation.SetExpand(b)
	return vu
}

// SetNillableExpand sets the "expand" field if the given value is not nil.
func (vu *VariableUpdate) SetNillableExpand(b *bool) *VariableUpdate {
	if b != nil {
		vu.SetExpand(*b)
	}
	return vu
}

// ClearExpand clears the value of the "expand" field.
func (vu *VariableUpdate) ClearExpand() *VariableUpdate {
	vu.mutation.ClearExpand()
	return vu
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (vu *VariableUpdate) SetEnvironment(e *Environment) *VariableUpdate {
	return vu.SetEnvironmentID(e.ID)
}

// Mutation returns the VariableMutation object of the builder.
func (vu *VariableUpdate) Mutation() *VariableMutation {
	return vu.mutation
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (vu *VariableUpdate) ClearEnvironment() *VariableUpdate {
	vu.mutation.ClearEnvironment()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VariableUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VariableUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VariableUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VariableUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VariableUpdate) check() error {
	if v, ok := vu.mutation.Name(); ok {
		if err := variable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Variable.name": %w`, err)}
		}
	}
	if vu.mutation.EnvironmentCleared() && len(vu.mutation.EnvironmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Variable.environment"`)
	}
	return nil
}

func (vu *VariableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(variable.Table, variable.Columns, sqlgraph.NewFieldSpec(variable.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(variable.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Value(); ok {
		_spec.SetField(variable.FieldValue, field.TypeString, value)
	}
	if value, ok := vu.mutation.Comment(); ok {
		_spec.SetField(variable.FieldComment, field.TypeString, value)
	}
	if vu.mutation.CommentCleared() {
		_spec.ClearField(variable.FieldComment, field.TypeString)
	}
	if value, ok := vu.mutation.Expand(); ok {
		_spec.SetField(variable.FieldExpand, field.TypeBool, value)
	}
	if vu.mutation.ExpandCleared() {
		_spec.ClearField(variable.FieldExpand, field.TypeBool)
	}
	if vu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.EnvironmentTable,
			Columns: []string{variable.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.EnvironmentTable,
			Columns: []string{variable.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VariableUpdateOne is the builder for updating a single Variable entity.
type VariableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VariableMutation
}

// SetEnvironmentID sets the "environment_id" field.
func (vuo *VariableUpdateOne) SetEnvironmentID(i int) *VariableUpdateOne {
	vuo.mutation.SetEnvironmentID(i)
	return vuo
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (vuo *VariableUpdateOne) SetNillableEnvironmentID(i *int) *VariableUpdateOne {
	if i != nil {
		vuo.SetEnvironmentID(*i)
	}
	return vuo
}

// SetName sets the "name" field.
func (vuo *VariableUpdateOne) SetName(s string) *VariableUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VariableUpdateOne) SetNillableName(s *string) *VariableUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetValue sets the "value" field.
func (vuo *VariableUpdateOne) SetValue(s string) *VariableUpdateOne {
	vuo.mutation.SetValue(s)
	return vuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (vuo *VariableUpdateOne) SetNillableValue(s *string) *VariableUpdateOne {
	if s != nil {
		vuo.SetValue(*s)
	}
	return vuo
}

// SetComment sets the "comment" field.
func (vuo *VariableUpdateOne) SetComment(s string) *VariableUpdateOne {
	vuo.mutation.SetComment(s)
	return vuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (vuo *VariableUpdateOne) SetNillableComment(s *string) *VariableUpdateOne {
	if s != nil {
		vuo.SetComment(*s)
	}
	return vuo
}

// ClearComment clears the value of the "comment" field.
func (vuo *VariableUpdateOne) ClearComment() *VariableUpdateOne {
	vuo.mutation.ClearComment()
	return vuo
}

// SetExpand sets the "expand" field.
func (vuo *VariableUpdateOne) SetExpand(b bool) *VariableUpdateOne {
	vuo.mutation.SetExpand(b)
	return vuo
}

// SetNillableExpand sets the "expand" field if the given value is not nil.
func (vuo *VariableUpdateOne) SetNillableExpand(b *bool) *VariableUpdateOne {
	if b != nil {
		vuo.SetExpand(*b)
	}
	return vuo
}

// ClearExpand clears the value of the "expand" field.
func (vuo *VariableUpdateOne) ClearExpand() *VariableUpdateOne {
	vuo.mutation.ClearExpand()
	return vuo
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (vuo *VariableUpdateOne) SetEnvironment(e *Environment) *VariableUpdateOne {
	return vuo.SetEnvironmentID(e.ID)
}

// Mutation returns the VariableMutation object of the builder.
func (vuo *VariableUpdateOne) Mutation() *VariableMutation {
	return vuo.mutation
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (vuo *VariableUpdateOne) ClearEnvironment() *VariableUpdateOne {
	vuo.mutation.ClearEnvironment()
	return vuo
}

// Where appends a list predicates to the VariableUpdate builder.
func (vuo *VariableUpdateOne) Where(ps ...predicate.Variable) *VariableUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VariableUpdateOne) Select(field string, fields ...string) *VariableUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Variable entity.
func (vuo *VariableUpdateOne) Save(ctx context.Context) (*Variable, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VariableUpdateOne) SaveX(ctx context.Context) *Variable {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VariableUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VariableUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VariableUpdateOne) check() error {
	if v, ok := vuo.mutation.Name(); ok {
		if err := variable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Variable.name": %w`, err)}
		}
	}
	if vuo.mutation.EnvironmentCleared() && len(vuo.mutation.EnvironmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Variable.environment"`)
	}
	return nil
}

func (vuo *VariableUpdateOne) sqlSave(ctx context.Context) (_node *Variable, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(variable.Table, variable.Columns, sqlgraph.NewFieldSpec(variable.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Variable.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, variable.FieldID)
		for _, f := range fields {
			if !variable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != variable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(variable.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Value(); ok {
		_spec.SetField(variable.FieldValue, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Comment(); ok {
		_spec.SetField(variable.FieldComment, field.TypeString, value)
	}
	if vuo.mutation.CommentCleared() {
		_spec.ClearField(variable.FieldComment, field.TypeString)
	}
	if value, ok := vuo.mutation.Expand(); ok {
		_spec.SetField(variable.FieldExpand, field.TypeBool, value)
	}
	if vuo.mutation.ExpandCleared() {
		_spec.ClearField(variable.FieldExpand, field.TypeBool)
	}
	if vuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.EnvironmentTable,
			Columns: []string{variable.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.EnvironmentTable,
			Columns: []string{variable.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Variable{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
