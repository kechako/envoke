// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kechako/envoke/ent/environment"
	"github.com/kechako/envoke/ent/variable"
)

// VariableCreate is the builder for creating a Variable entity.
type VariableCreate struct {
	config
	mutation *VariableMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEnvironmentID sets the "environment_id" field.
func (vc *VariableCreate) SetEnvironmentID(i int) *VariableCreate {
	vc.mutation.SetEnvironmentID(i)
	return vc
}

// SetName sets the "name" field.
func (vc *VariableCreate) SetName(s string) *VariableCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetValue sets the "value" field.
func (vc *VariableCreate) SetValue(s string) *VariableCreate {
	vc.mutation.SetValue(s)
	return vc
}

// SetComment sets the "comment" field.
func (vc *VariableCreate) SetComment(s string) *VariableCreate {
	vc.mutation.SetComment(s)
	return vc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (vc *VariableCreate) SetNillableComment(s *string) *VariableCreate {
	if s != nil {
		vc.SetComment(*s)
	}
	return vc
}

// SetExpand sets the "expand" field.
func (vc *VariableCreate) SetExpand(b bool) *VariableCreate {
	vc.mutation.SetExpand(b)
	return vc
}

// SetNillableExpand sets the "expand" field if the given value is not nil.
func (vc *VariableCreate) SetNillableExpand(b *bool) *VariableCreate {
	if b != nil {
		vc.SetExpand(*b)
	}
	return vc
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (vc *VariableCreate) SetEnvironment(e *Environment) *VariableCreate {
	return vc.SetEnvironmentID(e.ID)
}

// Mutation returns the VariableMutation object of the builder.
func (vc *VariableCreate) Mutation() *VariableMutation {
	return vc.mutation
}

// Save creates the Variable in the database.
func (vc *VariableCreate) Save(ctx context.Context) (*Variable, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VariableCreate) SaveX(ctx context.Context) *Variable {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VariableCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VariableCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VariableCreate) check() error {
	if _, ok := vc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment_id", err: errors.New(`ent: missing required field "Variable.environment_id"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Variable.name"`)}
	}
	if v, ok := vc.mutation.Name(); ok {
		if err := variable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Variable.name": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Variable.value"`)}
	}
	if len(vc.mutation.EnvironmentIDs()) == 0 {
		return &ValidationError{Name: "environment", err: errors.New(`ent: missing required edge "Variable.environment"`)}
	}
	return nil
}

func (vc *VariableCreate) sqlSave(ctx context.Context) (*Variable, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VariableCreate) createSpec() (*Variable, *sqlgraph.CreateSpec) {
	var (
		_node = &Variable{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(variable.Table, sqlgraph.NewFieldSpec(variable.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(variable.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.Value(); ok {
		_spec.SetField(variable.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := vc.mutation.Comment(); ok {
		_spec.SetField(variable.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := vc.mutation.Expand(); ok {
		_spec.SetField(variable.FieldExpand, field.TypeBool, value)
		_node.Expand = value
	}
	if nodes := vc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.EnvironmentTable,
			Columns: []string{variable.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Variable.Create().
//		SetEnvironmentID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VariableUpsert) {
//			SetEnvironmentID(v+v).
//		}).
//		Exec(ctx)
func (vc *VariableCreate) OnConflict(opts ...sql.ConflictOption) *VariableUpsertOne {
	vc.conflict = opts
	return &VariableUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VariableCreate) OnConflictColumns(columns ...string) *VariableUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VariableUpsertOne{
		create: vc,
	}
}

type (
	// VariableUpsertOne is the builder for "upsert"-ing
	//  one Variable node.
	VariableUpsertOne struct {
		create *VariableCreate
	}

	// VariableUpsert is the "OnConflict" setter.
	VariableUpsert struct {
		*sql.UpdateSet
	}
)

// SetEnvironmentID sets the "environment_id" field.
func (u *VariableUpsert) SetEnvironmentID(v int) *VariableUpsert {
	u.Set(variable.FieldEnvironmentID, v)
	return u
}

// UpdateEnvironmentID sets the "environment_id" field to the value that was provided on create.
func (u *VariableUpsert) UpdateEnvironmentID() *VariableUpsert {
	u.SetExcluded(variable.FieldEnvironmentID)
	return u
}

// SetName sets the "name" field.
func (u *VariableUpsert) SetName(v string) *VariableUpsert {
	u.Set(variable.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VariableUpsert) UpdateName() *VariableUpsert {
	u.SetExcluded(variable.FieldName)
	return u
}

// SetValue sets the "value" field.
func (u *VariableUpsert) SetValue(v string) *VariableUpsert {
	u.Set(variable.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *VariableUpsert) UpdateValue() *VariableUpsert {
	u.SetExcluded(variable.FieldValue)
	return u
}

// SetComment sets the "comment" field.
func (u *VariableUpsert) SetComment(v string) *VariableUpsert {
	u.Set(variable.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *VariableUpsert) UpdateComment() *VariableUpsert {
	u.SetExcluded(variable.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *VariableUpsert) ClearComment() *VariableUpsert {
	u.SetNull(variable.FieldComment)
	return u
}

// SetExpand sets the "expand" field.
func (u *VariableUpsert) SetExpand(v bool) *VariableUpsert {
	u.Set(variable.FieldExpand, v)
	return u
}

// UpdateExpand sets the "expand" field to the value that was provided on create.
func (u *VariableUpsert) UpdateExpand() *VariableUpsert {
	u.SetExcluded(variable.FieldExpand)
	return u
}

// ClearExpand clears the value of the "expand" field.
func (u *VariableUpsert) ClearExpand() *VariableUpsert {
	u.SetNull(variable.FieldExpand)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VariableUpsertOne) UpdateNewValues() *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Variable.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VariableUpsertOne) Ignore() *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VariableUpsertOne) DoNothing() *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VariableCreate.OnConflict
// documentation for more info.
func (u *VariableUpsertOne) Update(set func(*VariableUpsert)) *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VariableUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnvironmentID sets the "environment_id" field.
func (u *VariableUpsertOne) SetEnvironmentID(v int) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetEnvironmentID(v)
	})
}

// UpdateEnvironmentID sets the "environment_id" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateEnvironmentID() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateEnvironmentID()
	})
}

// SetName sets the "name" field.
func (u *VariableUpsertOne) SetName(v string) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateName() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *VariableUpsertOne) SetValue(v string) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateValue() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateValue()
	})
}

// SetComment sets the "comment" field.
func (u *VariableUpsertOne) SetComment(v string) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateComment() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *VariableUpsertOne) ClearComment() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.ClearComment()
	})
}

// SetExpand sets the "expand" field.
func (u *VariableUpsertOne) SetExpand(v bool) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetExpand(v)
	})
}

// UpdateExpand sets the "expand" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateExpand() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateExpand()
	})
}

// ClearExpand clears the value of the "expand" field.
func (u *VariableUpsertOne) ClearExpand() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.ClearExpand()
	})
}

// Exec executes the query.
func (u *VariableUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VariableCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VariableUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VariableUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VariableUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VariableCreateBulk is the builder for creating many Variable entities in bulk.
type VariableCreateBulk struct {
	config
	err      error
	builders []*VariableCreate
	conflict []sql.ConflictOption
}

// Save creates the Variable entities in the database.
func (vcb *VariableCreateBulk) Save(ctx context.Context) ([]*Variable, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Variable, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VariableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VariableCreateBulk) SaveX(ctx context.Context) []*Variable {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VariableCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VariableCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Variable.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VariableUpsert) {
//			SetEnvironmentID(v+v).
//		}).
//		Exec(ctx)
func (vcb *VariableCreateBulk) OnConflict(opts ...sql.ConflictOption) *VariableUpsertBulk {
	vcb.conflict = opts
	return &VariableUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VariableCreateBulk) OnConflictColumns(columns ...string) *VariableUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VariableUpsertBulk{
		create: vcb,
	}
}

// VariableUpsertBulk is the builder for "upsert"-ing
// a bulk of Variable nodes.
type VariableUpsertBulk struct {
	create *VariableCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VariableUpsertBulk) UpdateNewValues() *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VariableUpsertBulk) Ignore() *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VariableUpsertBulk) DoNothing() *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VariableCreateBulk.OnConflict
// documentation for more info.
func (u *VariableUpsertBulk) Update(set func(*VariableUpsert)) *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VariableUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnvironmentID sets the "environment_id" field.
func (u *VariableUpsertBulk) SetEnvironmentID(v int) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetEnvironmentID(v)
	})
}

// UpdateEnvironmentID sets the "environment_id" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateEnvironmentID() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateEnvironmentID()
	})
}

// SetName sets the "name" field.
func (u *VariableUpsertBulk) SetName(v string) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateName() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *VariableUpsertBulk) SetValue(v string) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateValue() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateValue()
	})
}

// SetComment sets the "comment" field.
func (u *VariableUpsertBulk) SetComment(v string) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateComment() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *VariableUpsertBulk) ClearComment() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.ClearComment()
	})
}

// SetExpand sets the "expand" field.
func (u *VariableUpsertBulk) SetExpand(v bool) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetExpand(v)
	})
}

// UpdateExpand sets the "expand" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateExpand() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateExpand()
	})
}

// ClearExpand clears the value of the "expand" field.
func (u *VariableUpsertBulk) ClearExpand() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.ClearExpand()
	})
}

// Exec executes the query.
func (u *VariableUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VariableCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VariableCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VariableUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
